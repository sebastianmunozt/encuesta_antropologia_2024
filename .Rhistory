mutate(
sd_08 = stringi::stri_trans_general(sd_08, "Latin-ASCII"),
sd_08 = tolower(sd_08),
sd_08 = gsub(" ", "_", sd_08),
sd_08 = gsub("-+$", "", sd_08),
)
# renombro
base_antropologia <- base_antropologia %>% dplyr::rename(nivel_educacion_madre= sd_08)
# recodifico
base_antropologia <- base_antropologia %>%
mutate(nivel_educacion_madre=case_when(nivel_educacion_madre ==  "profesional_(carreras_4_o_mas_anos)" ~ "Educaci√≥n Profesional",
nivel_educacion_madre == "magister_o_maestria" ~ "Educaci√≥n Profesional",
nivel_educacion_madre == "doctorado" ~ "Educaci√≥n Profesional",
nivel_educacion_madre == "tecnico_nivel_superior_(carreras_1_a_3_anos)" ~"Educaci√≥n T√©cnica",
nivel_educacion_madre ==  "educacion_media_tecnica_profesional" ~ "Educaci√≥n T√©cnica",
nivel_educacion_madre == "educacion_media" ~ "Educaci√≥n Media",
nivel_educacion_madre == "profesional_incompleto" ~ "Educaci√≥n Media",
nivel_educacion_madre == "educacion_media_incompleta" ~ "Educaci√≥n B√°sica",
TRUE ~ nivel_educacion_madre))
unique(base_antropologia$nivel_educacion_madre)
table(base_antropologia$nivel_educacion_madre)
#Ordeno las categor√≠as porque son ordinales
class(base_antropologia$nivel_educacion_madre) # est√°n en "character"
base_antropologia$nivel_educacion_madre <- base_antropologia$nivel_educacion_madre %>% fct_relevel(c("Educaci√≥n B√°sica", "Educaci√≥n Media", "Educaci√≥n T√©cnica", "Educaci√≥n Profesional"))
class(base_antropologia$nivel_educacion_madre) # ahora est√°n ordenadas y en "factor"
#Observo lo realizado
table(base_antropologia$nivel_educacion_madre)
# 3.3.9. Variable √∫ltimo Colegio####
unique(base_antropologia$sd_09)
#renombro
base_antropologia <- base_antropologia %>% dplyr::rename(ultimo_colegio = sd_09)
unique(base_antropologia$ultimo_colegio)
table(base_antropologia$ultimo_colegio)
#Ordeno las categor√≠as porque son ordinales
class(base_antropologia$ultimo_colegio) # est√°n en "character"
base_antropologia$ultimo_colegio <- base_antropologia$ultimo_colegio %>% fct_relevel(c("P√∫blico", "Particular subvencionado", "Particular"))
class(base_antropologia$ultimo_colegio) # ahora est√°n ordenadas y en "factor"
#Observo lo realizado
table(base_antropologia$ultimo_colegio)
#3.4.Variables de Estr√©s acad√©mico####
#3.4.1. Horas de estudio semana ####
# realizado por: Noel
class(base_antropologia$ea_01) # transformar en factor y ordenar: NOEL
#primero la cambio el nombre a la variable
base_antropologia <- base_antropologia %>% dplyr::rename (ea_01_horas_estudio_semana = "ea_01"  )
unique(base_antropologia$ea_01_horas_estudio_semana)
table(base_antropologia$ea_01_horas_estudio_semana)
#cambio a factor
class(base_antropologia$ea_01_horas_estudio_semana)
base_antropologia <- base_antropologia %>%
mutate(horas_estudio_semana = as.factor(ea_01_horas_estudio_semana))
#3.4.2. Horas de estudio fin de semana ####
# realizado por: Noel
unique(base_antropologia$ea_02)
#primero la cambio el nombre a la variable
base_antropologia <- base_antropologia %>% dplyr::rename (ea_02_horas_estudio_fin_semana = "ea_02")
names(base_antropologia)
#cambio a factor
class(base_antropologia$ea_02_horas_estudio_fin_semana)
base_antropologia <- base_antropologia %>%
mutate(ea_02_horas_estudio_fin_semana = as.factor(ea_02_horas_estudio_fin_semana))
#Observo tabla
table(base_antropologia $ea_02_horas_estudio_fin_semana)
#3.4.3. Carga acad√©mica actual  ####
# realizado por: Samanta
unique(base_antropologia$ea_03)
# renombro
base_antropologia <- base_antropologia %>% dplyr::rename(ea_03_descripcion_carga_academica = ea_03)
names(base_antropologia)
class(base_antropologia$ea_03_descripcion_carga_academica)
# Ordeno
base_antropologia$ea_03_descripcion_carga_academica <- base_antropologia$ea_03_descripcion_carga_academica %>% fct_relevel(c("Ligera", "Moderada", "Pesada", "Muy pesada"))
class(base_antropologia$ea_03_descripcion_carga_academica) # ahora est√°n ordenadas y en "factor"
table(base_antropologia$ea_03_descripcion_carga_academica)
#3.4.4. Notas √öltimo Semestre - FALTA  ####
# realizado por: Mat√≠as
unique(base_antropologia$ea_04) # recodificar a n√∫mero, recodificar a rangos: MATIAS
base_antropologia <- base_antropologia %>% dplyr::rename(ea_04_notas_ultimo_semestre= ea_04)
unique(base_antropologia$ea_04_notas_ultimo_semestre)
class(base_antropologia$ea_04_notas_ultimo_semestre)
base_antropologia <- base_antropologia %>%
mutate(ea_04_notas_ultimo_semestre= factor(ea_04_notas_ultimo_semestre))
base_antropologia <- base_antropologia %>%
mutate(ea_04_notas_ultimo_semestre=case_when(ea_04_notas_ultimo_semestre == "Alrededor de 5,8 creo " ~ "5.8",
ea_04_notas_ultimo_semestre == "Entre el a√±o 2024" ~ NA,
ea_04_notas_ultimo_semestre == "considerando que el segundo semestre del 2023 cursaba 4to medio, tuve un 6.7" ~ NA,
ea_04_notas_ultimo_semestre =="fui a un preu y solo fue desempe√±o asi que no se, solo se que mejore eso cuenta?" ~ NA,
ea_04_notas_ultimo_semestre == "." ~ NA,
ea_04_notas_ultimo_semestre == "5,6(?" ~ "5.6",
ea_04_notas_ultimo_semestre == "58-60" ~ "5.9",
ea_04_notas_ultimo_semestre == "Entre 5.0 y 5.5" ~ "5.3",
ea_04_notas_ultimo_semestre == "No s√© :( " ~ NA,
ea_04_notas_ultimo_semestre == "Congele " ~ NA,
ea_04_notas_ultimo_semestre == "congel√© " ~ NA,
ea_04_notas_ultimo_semestre == "6,0 aprox" ~ "6.0",
ea_04_notas_ultimo_semestre == "no me acuerdo" ~ NA,
ea_04_notas_ultimo_semestre == "estimo que entre un 55-60 pero no tengo certeza" ~ "5.7",
ea_04_notas_ultimo_semestre == "5,0 aprox" ~ "5.0",
ea_04_notas_ultimo_semestre == "Estoy en primer semestre " ~ NA,
ea_04_notas_ultimo_semestre == "estoy en primer a√±o" ~ NA,
ea_04_notas_ultimo_semestre == "c√≥mo un 5,0 no s√©" ~ "5.0",
ea_04_notas_ultimo_semestre == "Arriba de 56 " ~ "5.6",
ea_04_notas_ultimo_semestre == "Ingrese reci√©n este a√±o, as√≠ que a√∫n no termino el primer semestre "  ~ NA,
ea_04_notas_ultimo_semestre == "estoy en mi primer semestre, pero entre las 4 notas que tengo hacen promedio 6.4" ~ NA,
ea_04_notas_ultimo_semestre == "A" ~ NA,
ea_04_notas_ultimo_semestre == "nose"  ~ NA,
ea_04_notas_ultimo_semestre == "Cursando primer semestre " ~ NA,
ea_04_notas_ultimo_semestre == "a√∫n tengo muy pocas notas como para responder esta respuestaüòø" ~ NA,
ea_04_notas_ultimo_semestre == "Este es mi primer semestre" ~ NA,
ea_04_notas_ultimo_semestre == "62.0" ~ "6.2",
ea_04_notas_ultimo_semestre == "57.0" ~ "5.7",
ea_04_notas_ultimo_semestre == "60.0" ~ "6.0",
ea_04_notas_ultimo_semestre == "58.0" ~ "5.8",
ea_04_notas_ultimo_semestre == "53.0" ~ "5.3",
ea_04_notas_ultimo_semestre == "0.0" ~ NA,
ea_04_notas_ultimo_semestre == "63.0" ~ "6.3",
ea_04_notas_ultimo_semestre == "50.0" ~ "5.0",
ea_04_notas_ultimo_semestre == "64.0" ~ "6.4",
ea_04_notas_ultimo_semestre == "45.0" ~ "4.5",
ea_04_notas_ultimo_semestre == "52.0" ~ "5.2",
ea_04_notas_ultimo_semestre == "59.0" ~ "5.9",
ea_04_notas_ultimo_semestre == "49.0" ~ "4.9",
ea_04_notas_ultimo_semestre == "67.0" ~ "6.7",
ea_04_notas_ultimo_semestre == "48.0" ~ "4.8",
TRUE ~  ea_04_notas_ultimo_semestre ))
unique(base_antropologia$ea_04_notas_ultimo_semestre)
base_antropologia$ea_04_notas_ultimo_semestre <- as.numeric(base_antropologia$ea_04_notas_ultimo_semestre)
class(base_antropologia$ea_04_notas_ultimo_semestre)
table(base_antropologia$ea_04_notas_ultimo_semestre)
base_antropologia <- base_antropologia %>%
mutate (notas_ultimo_semestre_intervalo= case_when (ea_04_notas_ultimo_semestre >= 4 & ea_04_notas_ultimo_semestre < 5 ~ "4.0 a 4.9",
ea_04_notas_ultimo_semestre >= 5 & ea_04_notas_ultimo_semestre < 6  ~ "5.0 a 5.9",
ea_04_notas_ultimo_semestre >= 6 & ea_04_notas_ultimo_semestre < 7 ~ "6.0 a 7.0",
))
table(base_antropologia$notas_ultimo_semestre_intervalo)
#3.4.5. Satisfacci√≥n rendimiento  ####
# realizado por: Samanta
unique(base_antropologia$ea_05)
# renombro
base_antropologia <- base_antropologia %>% dplyr::rename(ea_05_satisfaccion_rendimiento_academico = ea_05)
names(base_antropologia)
# Observo categor√≠as
table(base_antropologia$ea_05_satisfaccion_rendimiento_academico)
class(base_antropologia$ea_05_satisfaccion_rendimiento_academico)
# Ordeno categor√≠as y transformo a factor
base_antropologia$ea_05_satisfaccion_rendimiento_academico <- base_antropologia$ea_05_satisfaccion_rendimiento_academico %>% fct_relevel(c("Muy insatisfecho", "Insatisfecho", "Satisfecho", "Muy satisfecho"))
class(base_antropologia$ea_05_satisfaccion_rendimiento_academico)
# Recodifico
base_antropologia <- base_antropologia %>%
mutate(ea_05_satisfaccion_rendimiento_academico_r = case_when(ea_05_satisfaccion_rendimiento_academico== "Insatisfecho" ~ "Insatisfecho",
ea_05_satisfaccion_rendimiento_academico== "Muy insatisfecho" ~ "Insatisfecho",
ea_05_satisfaccion_rendimiento_academico== "Muy Satisfecho" ~ "Satisfecho",
ea_05_satisfaccion_rendimiento_academico== "Satisfecho" ~ "Satisfecho"))
# Observo lo realizado
table(base_antropologia$ea_05_satisfaccion_rendimiento_academico_r)
#3.4.6. Nivel de Estr√©s  ####
# realizado por: Joaqu√≠n
unique(base_antropologia$ea_06)
base_antropologia <- base_antropologia %>% dplyr::rename(ea_06_nivel_estres_ultimo_semestre = ea_06)
table(base_antropologia$ea_06_nivel_estres_ultimo_semestre)
class(base_antropologia$ea_06_nivel_estres_ultimo_semestre)
# recodifico
base_antropologia <- base_antropologia %>%
mutate(ea_06_nivel_estres_ultimo_semestre_r=case_when(ea_06_nivel_estres_ultimo_semestre == 1 ~ "Estres Bajo",
ea_06_nivel_estres_ultimo_semestre == 2 ~ "Estres Bajo",
ea_06_nivel_estres_ultimo_semestre == 3 ~ "Estres Moderado",
ea_06_nivel_estres_ultimo_semestre == 4 ~ "Estres Alto",
ea_06_nivel_estres_ultimo_semestre == 5 ~ "Estres Alto",
))
# ordeno variable recodificada
base_antropologia <- base_antropologia %>%
mutate(ea_06_nivel_estres_ultimo_semestre_r= factor(ea_06_nivel_estres_ultimo_semestre_r, levels = c("Estres Bajo","Estres Moderado",
"Estres Alto" ), ordered = TRUE))
# observo recodificaci√≥n
table(base_antropologia$ea_06_nivel_estres_ultimo_semestre_r)
#3.4.7. Estr√©s ante rendimiento  ####
# realizado por: Joaqu√≠n
unique(base_antropologia$ea_07)
base_antropologia <- base_antropologia %>% dplyr::rename(ea_07_efecto_estres_rendimiento = ea_07)
table(base_antropologia$ea_07_efecto_estres_rendimiento)
#ordeno
base_antropologia <- base_antropologia %>%
mutate(ea_07_efecto_estres_rendimiento =factor(ea_07_efecto_estres_rendimiento, levels = c("Poco","Moderado",
"Bastante","Mucho"), ordered = TRUE))
table(base_antropologia$ea_07_efecto_estres_rendimiento)
#recodifico en dos
base_antropologia <- base_antropologia %>%
mutate(ea_07_efecto_estres_rendimiento_r=case_when(ea_07_efecto_estres_rendimiento == "Mucho" ~ "Bastante",
ea_07_efecto_estres_rendimiento == "Bastante" ~ "Bastante",
ea_07_efecto_estres_rendimiento == "Moderado" ~ "Moderadamente",
ea_07_efecto_estres_rendimiento == "Poco" ~ "Moderadamente"
))
base_antropologia <- base_antropologia %>%
mutate(ea_07_efecto_estres_rendimiento_r= factor(ea_07_efecto_estres_rendimiento_r, levels = c("Moderadamente",
"Bastante"
), ordered = TRUE))
#observo
table(base_antropologia$ea_07_efecto_estres_rendimiento_r)
# ea_08_puede_identificar_por_si_mismo_cuando_se_siente_estresado_debidos_a_factores_relacionados_con_el_ambito_universitario",
unique(base_antropologia$ea_08)
# ea_09: respuesta m√∫ltiple procesamiento abajo
# ea_10: respuesta m√∫ltiple procesamiento abajo
# 4. Exportar ----------------------------------------------------------------
names(base_antropologia)
write.xlsx(x = base_antropologia,file = "base_antropologia_limpia.xlsx")
# An√°lisis Univariados -------------------------------
# Sociodemogr√°ficas y de identificaci√≥n -----------------------------------
# 01. n_encuestador
# Distribuci√≥n de Frecuencias
n_encuestador_t <- freq(base_antropologia$n_encuestador, prop=TRUE, order = "freq", report.nas = FALSE) %>%
tb()
#install.packages("kableExtra")
library(kableExtra)
n_encuestador_t <- freq(base_antropologia$n_encuestador, prop=TRUE, order = "freq", report.nas = FALSE) %>%
tb() %>%
kable(col.names = c("Encuestador/a", "Frecuencia", "%", "% Acumulado"),
caption = "Encuestas por Encuestador/a",
format = "html", digits = 2) %>%  #le doy formate con kable
kable_classic(full_width = F, html_font = "Cambria") %>%
save_kable(file = "outputs/n_encuestador.png", zoom = 3)
# renombro nombre de mi tabla
n_encuestador_t <-  n_encuestador_t %>%
rename(Nombre = value, Porcentaje= pct, Frecuencia = freq)
# An√°lisis Univariados -------------------------------
names(base_antropologia)
base_antropologia$ea_09 <- as.character(base_antropologia$ea_09)
base_antropologia$identidad_genero_r <- as.character(base_antropologia$identidad_genero_r)
respuestas_ea_09 <- unlist(strsplit(base_antropologia$ea_09, ",\\s*"))
identidades <- rep(base_antropologia$identidad_genero_r, times = sapply(strsplit(base_antropologia$ea_09, ",\\s*"), length))
# Creamos un nuevo DataFrame con las respuestas e identidades
data_cruzada <- data.frame(Respuesta = respuestas_ea_09, IdentidadGenero = identidades)
analisis_cruzado <- data_cruzada %>%
group_by(Respuesta, IdentidadGenero) %>%
summarise(Count = n(), .groups = 'drop')
print(analisis_cruzado)
# Suponiendo que 'data_cruzada' es tu DataFrame con las columnas Respuesta e IdentidadGenero
# Contar las incidencias de cada combinaci√≥n
conteos <- data_cruzada %>%
group_by(IdentidadGenero, Respuesta) %>%
summarise(Count = n(), .groups = 'drop')
# Crear la tabla de contingencia con totales por identidad de g√©nero
tabla_contingencia <- conteos %>%
pivot_wider(names_from = IdentidadGenero, values_from = Count, values_fill = list(Count = 0)) %>%
mutate(Total = rowSums(across(where(is.numeric))))
# Calcular porcentajes en las columnas respecto al total de cada identidad de g√©nero
tabla_porcentajes <- tabla_contingencia %>%
mutate(across(where(is.numeric), ~ . / Total * 100))
# Eliminar la columna 'Total' si solo quieres ver los porcentajes
tabla_porcentajes <- tabla_porcentajes %>% select(-Total)
# Ver los resultados
print(tabla_porcentajes)
# Suponiendo que 'data_cruzada' es tu DataFrame con las columnas Respuesta e IdentidadGenero
# Contar las incidencias de cada combinaci√≥n
conteos <- data_cruzada %>%
group_by(IdentidadGenero, Respuesta) %>%
summarise(Count = n(), .groups = 'drop')
# Crear la tabla de contingencia con conteos
tabla_contingencia <- conteos %>%
pivot_wider(names_from = IdentidadGenero, values_from = Count, values_fill = list(Count = 0)) %>%
mutate(Total = rowSums(across(where(is.numeric))))  # Calcula el total de cada fila
# Calcular totales de cada columna (incluido el total general)
totales_columnas <- colSums(tabla_contingencia[,-1])  # Excluye la primera columna que contiene las respuestas
# Calcular porcentajes para cada columna basado en sus respectivos totales
tabla_porcentajes <- tabla_contingencia %>%
mutate(across(where(is.numeric), ~ . / totales_columnas * 100))
# Asegurar que la columna de totales tambi√©n sume 100
tabla_porcentajes$Total <- tabla_porcentajes$Total / sum(tabla_porcentajes$Total) * 100
# Ver los resultados
print(tabla_porcentajes)
conteos <- data_cruzada %>%
group_by(IdentidadGenero, Respuesta) %>%
summarise(Count = n(), .groups = 'drop')
# Crear la tabla de contingencia con conteos
tabla_contingencia <- conteos %>%
pivot_wider(names_from = IdentidadGenero, values_from = Count, values_fill = list(Count = 0))
# Calcular totales de cada columna (sin incluir el total general a√∫n)
totales_columnas <- colSums(tabla_contingencia[,-1])  # Excluye la primera columna que contiene las respuestas
# Calcular porcentajes para cada columna basado en sus respectivos totales
tabla_porcentajes <- tabla_contingencia %>%
mutate(across(-1, ~ . / totales_columnas * 100))  # Excluye la primera columna durante el c√°lculo de porcentaje
# Calcular el total general de la tabla y convertir a porcentaje
tabla_porcentajes <- tabla_porcentajes %>%
mutate(Total = rowSums(across(-1)))  # Suma las filas excluyendo la columna de respuestas
# Asegurar que la columna de totales tambi√©n sume 100
tabla_porcentajes$Total <- tabla_porcentajes$Total / sum(tabla_porcentajes$Total) * 100
# Ver los resultados
print(tabla_porcentajes)
# Suponiendo que 'data_cruzada' es tu DataFrame con las columnas Respuesta e IdentidadGenero
# Contar las incidencias de cada combinaci√≥n
conteos <- data_cruzada %>%
group_by(IdentidadGenero, Respuesta) %>%
summarise(Count = n(), .groups = 'drop')
# Crear la tabla de contingencia con conteos
tabla_contingencia <- conteos %>%
pivot_wider(names_from = IdentidadGenero, values_from = Count, values_fill = list(Count = 0))
# Calcular los totales para cada identidad de g√©nero
totales_por_genero <- colSums(tabla_contingencia[, -1])  # excluye la primera columna de respuestas
# Calcular porcentajes para cada identidad de g√©nero, asegurando que cada columna sume 100%
tabla_porcentajes <- tabla_contingencia
for (col in names(totales_por_genero)) {
tabla_porcentajes[[col]] <- tabla_porcentajes[[col]] / totales_por_genero[[col]] * 100
}
# Mostrar los resultados
print(tabla_porcentajes)
# Suponiendo que 'data_cruzada' es tu DataFrame con las columnas Respuesta e IdentidadGenero
# Contar las incidencias de cada combinaci√≥n
conteos <- data_cruzada %>%
group_by(IdentidadGenero, Respuesta) %>%
summarise(Count = n(), .groups = 'drop')
# Crear la tabla de contingencia con conteos
tabla_contingencia <- conteos %>%
pivot_wider(names_from = IdentidadGenero, values_from = Count, values_fill = list(Count = 0))
# Calcular los totales para cada identidad de g√©nero
totales_por_genero <- colSums(tabla_contingencia[, -1])  # excluye la primera columna de respuestas
# Calcular porcentajes para cada identidad de g√©nero, asegurando que cada columna sume 100%
tabla_porcentajes <- tabla_contingencia
for (col in names(totales_por_genero)) {
tabla_porcentajes[[col]] <- tabla_porcentajes[[col]] / totales_por_genero[[col]] * 100
}
# Agregar columna de totales que tambi√©n sume 100%
tabla_porcentajes$Total <- rowSums(tabla_porcentajes[, -1]) / sum(totales_por_genero) * 100
# Agregar fila de totales para cada columna
total_row <- c(Respuesta = "Total", sapply(tabla_porcentajes[, -1], sum))
tabla_porcentajes <- bind_rows(tabla_porcentajes, total_row)
# Suponiendo que 'data_cruzada' es tu DataFrame con las columnas Respuesta e IdentidadGenero
# Contar las incidencias de cada combinaci√≥n
conteos <- data_cruzada %>%
group_by(IdentidadGenero, Respuesta) %>%
summarise(Count = n(), .groups = 'drop')
# Crear la tabla de contingencia con conteos
tabla_contingencia <- conteos %>%
pivot_wider(names_from = IdentidadGenero, values_from = Count, values_fill = list(Count = 0))
# Calcular los totales para cada identidad de g√©nero
totales_por_genero <- colSums(tabla_contingencia[, -1])  # excluye la primera columna de respuestas
# Calcular porcentajes para cada identidad de g√©nero, asegurando que cada columna sume 100%
tabla_porcentajes <- tabla_contingencia
for (col in names(totales_por_genero)) {
tabla_porcentajes[[col]] <- tabla_porcentajes[[col]] / totales_por_genero[[col]] * 100
}
# Agregar columna de totales que tambi√©n sume 100%
tabla_porcentajes$Total <- rowSums(tabla_porcentajes[, -1]) / sum(totales_por_genero) * 100
# Agregar fila de totales para cada columna
total_row <- c(Respuesta = "Total", sapply(tabla_porcentajes[, -1], sum))
tabla_porcentajes <- bind_rows(tabla_porcentajes, total_row)
# Suponiendo que 'data_cruzada' es tu DataFrame con las columnas Respuesta e IdentidadGenero
# Contar las incidencias de cada combinaci√≥n
conteos <- data_cruzada %>%
group_by(IdentidadGenero, Respuesta) %>%
summarise(Count = n(), .groups = 'drop')
# Crear la tabla de contingencia con conteos
tabla_contingencia <- conteos %>%
pivot_wider(names_from = IdentidadGenero, values_from = Count, values_fill = list(Count = 0))
# Calcular los totales para cada identidad de g√©nero
totales_por_genero <- colSums(tabla_contingencia[, -1])  # excluye la primera columna de respuestas
# Calcular porcentajes para cada identidad de g√©nero, asegurando que cada columna sume 100%
tabla_porcentajes <- tabla_contingencia
for (col in names(totales_por_genero)) {
tabla_porcentajes[[col]] <- tabla_porcentajes[[col]] / totales_por_genero[[col]] * 100
}
# Agregar columna de totales que tambi√©n sume 100%
tabla_porcentajes$Total <- rowSums(tabla_porcentajes[, -1]) / sum(totales_por_genero) * 100
# Preparar una fila de totales, asegurando que todos los elementos sean num√©ricos, excepto la etiqueta
total_row <- c(Respuesta = "Total", sapply(tabla_porcentajes[, -1, drop = FALSE], sum))  # Usa drop = FALSE para mantener la estructura de data frame
# Convertir el elemento 'Respuesta' en caracter para la fila 'Total'
total_row['Respuesta'] <- as.character(total_row['Respuesta'])
# Agregar la fila 'Total'
tabla_porcentajes <- bind_rows(tabla_porcentajes, total_row)
# Suponiendo que 'data_cruzada' es tu DataFrame con las columnas Respuesta e IdentidadGenero
# Contar las incidencias de cada combinaci√≥n
conteos <- data_cruzada %>%
group_by(IdentidadGenero, Respuesta) %>%
summarise(Count = n(), .groups = 'drop')
# Crear la tabla de contingencia con conteos
tabla_contingencia <- conteos %>%
pivot_wider(names_from = IdentidadGenero, values_from = Count, values_fill = list(Count = 0))
# Calcular los totales para cada identidad de g√©nero
totales_por_genero <- colSums(tabla_contingencia[, -1])  # excluye la primera columna de respuestas
# Calcular porcentajes para cada identidad de g√©nero, asegurando que cada columna sume 100%
tabla_porcentajes <- tabla_contingencia
for (col in names(totales_por_genero)) {
tabla_porcentajes[[col]] <- tabla_porcentajes[[col]] / totales_por_genero[[col]] * 100
}
# Agregar columna de totales que tambi√©n sume 100%
tabla_porcentajes$Total <- rowSums(tabla_porcentajes[, -1]) / sum(totales_por_genero) * 100
# Convertir 'Respuesta' a caracter para asegurar compatibilidad
tabla_porcentajes$Respuesta <- as.character(tabla_porcentajes$Respuesta)
# Crear la fila 'Total' como un tibble, asegurando que todos los tipos de datos sean correctos
total_row <- tibble(
Respuesta = "Total",
across(.cols = names(totales_por_genero), .fns = ~sum(tabla_porcentajes[[.]])),
Total = sum(tabla_porcentajes$Total)
)
View(data_cruzada)
data_cruzada
ctable( x = data_cruzada$Respuesta, y = data_cruzada$IdentidadGenero, prop = "c", justify = "l")
data_cruzada %>%
select(Respuesta, IdentidadGenero) %>%
droplevels() %>%
table(.) %>%
addmargins(.,2) %>% #primero addmargins
prop.table(.,2) %>% #segundo prop.table
round(4)*100
tabla_porcentajes <- data_cruzada %>%
select(Respuesta, IdentidadGenero) %>%
droplevels() %>%
table() %>%
addmargins(., 2) %>%
prop.table(., 2) %>%
round(4) * 100
# Convertir la matriz a un data frame para manejar m√°s f√°cilmente
df_porcentajes <- as.data.frame.matrix(tabla_porcentajes)
# Agregar una fila de totales al data frame
df_porcentajes <- bind_rows(df_porcentajes, Total = colSums(df_porcentajes))
# Mostrar el resultado
print(df_porcentajes)
ctable( x = data_cruzada$Respuesta, y = data_cruzada$IdentidadGenero, prop = "c", justify = "l", chisq = T)
pacman::p_load(tidyverse,# Universo de paquetes : tidyr, dplyr, ggplot2,readr,purrr,tibble, stringr, forcats
openxlsx,#leer archivos xlsx
readxl,# leer archivos xl      #dos formatos de excel xlsx y xl
janitor,#limpieza de datos
writexl,#Guardar tablas formato excel
DataExplorer) #Exploraci√≥n r√°pida
pacman::p_load(tidyverse, openxlsx, readxl,readr,janitor, forcats, writexl, DataExplorer,
datos,  knitr, gt, summarytools, ggthemes, hrbrthemes, foreign, DescTools, ineq)
base_antropologia <- read.xlsx("base_antropologia_limpia.xlsx")
libro_codigos<- read.xlsx("M√©todos Cuantitativos III (respuestas).xlsx") # dejo una base sin limpiar para observar nombres de preguntas
# 01. n_encuestador
# Distribuci√≥n de Frecuencias
n_encuestador_t <- freq(base_antropologia$n_encuestador, prop=TRUE, order = "freq", report.nas = FALSE) %>%
tb()
names(base_antropologia)
View(n_encuestador_t)
#install.packages("kableExtra")
library(kableExtra)
n_encuestador_t <- freq(base_antropologia$n_encuestador, prop=TRUE, order = "freq", report.nas = FALSE) %>%
tb() %>%
kable(col.names = c("Encuestador/a", "Frecuencia", "%", "% Acumulado"),
caption = "Encuestas por Encuestador/a",
format = "html", digits = 2) %>%  #le doy formate con kable
kable_classic(full_width = F, html_font = "Cambria") %>%
save_kable(file = "outputs/n_encuestador.png", zoom = 3)
# b) realizaci√≥n de gr√°fico
# renombro nombre de mi tabla
n_encuestador_t <-  n_encuestador_t %>%
rename(Nombre = value, Porcentaje= pct, Frecuencia = freq)
# realizo gr√°fico
n_encuestador_g <- ggplot(n_encuestador_t, aes(x = Frecuencia, y = fct_reorder(Nombre, Frecuencia), fill= Nombre)) +
geom_col() +
labs(title = "Encuestas por Encuestador/a",
subtitle = "seg√∫n datos de Encuestas Estudiantes Antropolog√≠a 2024",
x = "%",  # Esto establece el t√≠tulo del eje x, pero no afecta las etiquetas dentro del gr√°fico
y = "Nombre del Encuestador/a") +
geom_text(aes(label = round(Frecuencia, 1)),  # Ahora esto a√±ade etiquetas a todas las barras
hjust = 1, size = 3, nudge_x = -0.9, fontface= "bold", color = "white") +
scale_fill_viridis_d(option = "C", guide = "none") +
theme_ipsum()
# a) Distribuci√≥n de Frecuencias
n_encuestador_t <- freq(base_antropologia$n_encuestador, prop=TRUE, order = "freq", report.nas = FALSE) %>%
tb()
req(base_antropologia$n_encuestador, prop=TRUE, order = "freq", report.nas = FALSE) %>%
tb() %>%
kable(col.names = c("Encuestador/a", "Frecuencia", "%", "% Acumulado"),
caption = "Encuestas por Encuestador/a",
format = "html", digits = 2) %>%  #le doy formate con kable
kable_classic(full_width = F, html_font = "Cambria") %>%
save_kable(file = "outputs/n_encuestador.png", zoom = 3)
freq(base_antropologia$n_encuestador, prop=TRUE, order = "freq", report.nas = FALSE) %>%
tb() %>%
kable(col.names = c("Encuestador/a", "Frecuencia", "%", "% Acumulado"),
caption = "Encuestas por Encuestador/a",
format = "html", digits = 2) %>%  #le doy formate con kable
kable_classic(full_width = F, html_font = "Cambria") %>%
save_kable(file = "outputs/n_encuestador.png", zoom = 3)
# b) realizaci√≥n de gr√°fico
# renombro nombre de mi tabla
n_encuestador_t <-  n_encuestador_t %>%
rename(Nombre = value, Porcentaje= pct, Frecuencia = freq)
# realizo gr√°fico
n_encuestador_g <- ggplot(n_encuestador_t, aes(x = Frecuencia, y = fct_reorder(Nombre, Frecuencia), fill= Nombre)) +
geom_col() +
labs(title = "Encuestas por Encuestador/a",
subtitle = "seg√∫n datos de Encuestas Estudiantes Antropolog√≠a 2024",
x = "%",  # Esto establece el t√≠tulo del eje x, pero no afecta las etiquetas dentro del gr√°fico
y = "Nombre del Encuestador/a") +
geom_text(aes(label = round(Frecuencia, 1)),  # Ahora esto a√±ade etiquetas a todas las barras
hjust = 1, size = 3, nudge_x = -0.9, fontface= "bold", color = "white") +
scale_fill_viridis_d(option = "C", guide = "none") +
theme_ipsum()
# realizo gr√°fico
ggplot(n_encuestador_t, aes(x = Frecuencia, y = fct_reorder(Nombre, Frecuencia), fill= Nombre)) +
geom_col() +
labs(title = "Encuestas por Encuestador/a",
subtitle = "seg√∫n datos de Encuestas Estudiantes Antropolog√≠a 2024",
x = "%",  # Esto establece el t√≠tulo del eje x, pero no afecta las etiquetas dentro del gr√°fico
y = "Nombre del Encuestador/a") +
geom_text(aes(label = round(Frecuencia, 1)),  # Ahora esto a√±ade etiquetas a todas las barras
hjust = 1, size = 3, nudge_x = -0.9, fontface= "bold", color = "white") +
scale_fill_viridis_d(option = "C", guide = "none") +
theme_ipsum()
# guardo gr√°fico
n_encuestador_g <- ggplot(n_encuestador_t, aes(x = Frecuencia, y = fct_reorder(Nombre, Frecuencia), fill= Nombre)) +
geom_col() +
labs(title = "Encuestas por Encuestador/a",
subtitle = "seg√∫n datos de Encuestas Estudiantes Antropolog√≠a 2024",
x = "%",  # Esto establece el t√≠tulo del eje x, pero no afecta las etiquetas dentro del gr√°fico
y = "Nombre del Encuestador/a") +
geom_text(aes(label = round(Frecuencia, 1)),  # Ahora esto a√±ade etiquetas a todas las barras
hjust = 1, size = 3, nudge_x = -0.9, fontface= "bold", color = "white") +
scale_fill_viridis_d(option = "C", guide = "none") +
theme_ipsum()
ggsave("outputs/n_encuestador_g.png", plot = n_encuestador_g, width = 10, height = 7, dpi = 300)
names(base_antropologia)
